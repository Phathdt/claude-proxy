name: Build & Push Docker Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: phathdt379
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Build frontend
        run: |
          cd frontend
          pnpm install
          pnpm build

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            phathdt379/claude-proxy:v${{ github.event.inputs.version }}
            phathdt379/claude-proxy:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, get all commits
            CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s")
          fi

          # Create changelog file
          {
            echo "Release v${{ github.event.inputs.version }}"
            echo ""
            echo "## 🎉 Changes"
            echo "$CHANGELOG"
            echo ""
            echo "## 🐳 Docker Image"
            echo "The Docker image for this release is available at:"
            echo "- \`phathdt379/claude-proxy:v${{ github.event.inputs.version }}\`"
            echo "- \`phathdt379/claude-proxy:latest\`"
            echo ""
            echo "**Multi-platform support:** Linux (amd64, arm64) including macOS M1/M2/M3"
            echo ""
            echo "## 📦 Pull & Run"
            echo "\`\`\`bash"
            echo "docker pull phathdt379/claude-proxy:v${{ github.event.inputs.version }}"
            echo "docker run -d \\"
            echo "  --name claude-proxy \\"
            echo "  -p 4000:4000 \\"
            echo "  -v ~/.claude-proxy/data:/app/data \\"
            echo "  -v \$(pwd)/config.yaml:/app/config.yaml \\"
            echo "  phathdt379/claude-proxy:v${{ github.event.inputs.version }}"
            echo "\`\`\`"
            echo ""
            echo "Built automatically via GitHub Actions."
          } > /tmp/changelog.txt

          # Output changelog for debugging
          echo "## Generated Release Notes:"
          cat /tmp/changelog.txt

          # Set as output for next step (handle multiline)
          {
            echo "body<<EOF"
            cat /tmp/changelog.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create and push git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ github.event.inputs.version }} -m "Release v${{ github.event.inputs.version }}"
          git push origin v${{ github.event.inputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: v${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: false
          make_latest: true
